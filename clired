#!/usr/bin/python3
import sys
import urwid
import logging
import getpass
import argparse
from widgets.CRMainView import CRMainView
from widgets.CRIssueView import CRIssueView
from utils.CRRedmineProvider import CRRedmineProvider
import utils.CRSettings


logging.basicConfig(filename='clired.log',level=logging.DEBUG)
logger = logging.getLogger(__name__)

#
# Parsing command-line arguments
#
parser = argparse.ArgumentParser(description="Redmine CLI client")
parser.add_argument('issue', type=int, nargs='?')
parser.add_argument('-s', '--server', type=str)
parser.add_argument('-p', '--project', type=str)
parser.add_argument('-u', '--username', type=str)
argv = parser.parse_args()

settings = utils.CRSettings.get_settings()

if argv.server:
    print(argv.server)
    settings.set_value('server_uri', argv.server)
if argv.project:
    print(argv.project)
    settings.set_value('project', argv.project)
if argv.username:
    print(argv.username)
    settings.set_value('username', argv.username)

if not settings.has_value('password'):
    settings.set_value('password', getpass.getpass())

provider = CRRedmineProvider(settings)

if len(sys.argv) == 1:
    main = CRMainView(provider)
    provider.set_status_handler(main.status)
else:
    logger.debug("Trying to fetch issue #{0}".format(sys.argv[1]))
    issue = provider.issue(sys.argv[1])
    main = CRIssueView(issue)

def exit_on_cr(input):
    logger.debug("Key pressed: " + str(input))
    if input == 'q':
        raise urwid.ExitMainLoop()

palette = [
    ('issue-progress_completed', 'dark green', 'light blue'),
    ('issue-progress_incompleted', 'black', 'white'),
    ('issues_index-normal', 'dark green', 'black'),
    ('issues_index-focused','black', 'dark green'),
    ('status_line-warning', 'yellow', 'default'),
    ('status_line-error',   'dark red',    'default'),
    ('status_line-success', 'white',    'default'),
    ('status_line-info',    'light blue',   'default')
]

loop = urwid.MainLoop(main, palette, unhandled_input=exit_on_cr)
loop.run()
