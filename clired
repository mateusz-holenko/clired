#!/usr/bin/python3

import sys
import urwid
import logging
import getpass
import argparse
import urwid.signals

from views.IssueView import IssueView
from views.MyPageView import MyPageView
import core.Redmine
import core.Configuration
import core.ViewManager


logging.basicConfig(filename='clired.log',level=logging.DEBUG)
logger = logging.getLogger(__name__)

#
# Parsing command-line arguments
#
parser = argparse.ArgumentParser(description="Redmine CLI client")
parser.add_argument('issue', type=int, nargs='?')
parser.add_argument('-s', '--server', type=str)
parser.add_argument('-p', '--project', type=str)
parser.add_argument('-u', '--username', type=str)
argv = parser.parse_args()

conf = core.Configuration.instance()
if not conf.has_value('password'):
    conf.set_value('password', getpass.getpass())

def key_handler(input):
    if input == 'q':
        if not core.ViewManager.close_view():
            raise urwid.ExitMainLoop()
    else:
        if not core.ViewManager.get_current_view().key_pressed(input):
            logger.debug("Unhandled key pressed: " + str(input))

palette = [
    ('issue-progress_completed'   , 'dark green' , 'light blue' ) ,
    ('issue-progress_incompleted' , 'black'      , 'white'      ) ,
    ('issues_index-normal'        , 'dark green' , ''           ) ,
    ('issues_index-focused'       , 'black'      , 'dark green' ) ,
    ('status_line-warning'        , 'yellow'     , 'default'    ) ,
    ('status_line-error'          , 'dark red'   , 'default'    ) ,
    ('status_line-success'        , 'white'      , 'default'    ) ,
    ('status_line-info'           , 'light blue' , 'default'    )
]

loop = urwid.MainLoop(urwid.Text("clired"), palette, unhandled_input=key_handler)

core.ViewManager.loop = loop

if argv.issue:
    issue_view = IssueView(core.Redmine.instance().issue(argv.issue))
    core.ViewManager.show_view(issue_view)
else:
    my_page = MyPageView(core.Redmine.instance().my_issues(False))
    urwid.signals.connect_signal(my_page, 'selected', lambda i: core.ViewManager.show_view(IssueView(i)))
    core.ViewManager.show_view(my_page)

loop.run()
print("Good bye!")
