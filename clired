#!/usr/bin/python3

import sys
import urwid
import logging
import getpass
import argparse
import urwid.signals

from views.IssueView import IssueView
from views.MyPageView import MyPageView
import core.Redmine
import core.Configuration
import core.ViewManager
from widgets.YesNoDialog import YesNoDialog


logging.basicConfig(filename='clired.log',level=logging.DEBUG)
logger = logging.getLogger(__name__)

#
# Parsing command-line arguments
#
parser = argparse.ArgumentParser(description="Redmine CLI client")
parser.add_argument('issue', type=int, nargs='?')
parser.add_argument('-s', '--server', type=str)
parser.add_argument('-p', '--project', type=str)
parser.add_argument('-u', '--username', type=str)
argv = parser.parse_args()

conf = core.Configuration.instance()
if not conf.has_value('password'):
    conf.set_value('password', getpass.getpass())

def quitter(arg):
    global quit_dialog
    if arg == True:
        raise urwid.ExitMainLoop()
    else:
        core.ViewManager.set_commandbar(urwid.Text(""))
        quit_dialog = None

quit_dialog = None
def key_handler(input):
    global quit_dialog
    if core.ViewManager.is_last_view():
        if input == 'q' and quit_dialog is None:
            quit_dialog = YesNoDialog("Do you really want to quit clired?")
            urwid.signals.connect_signal(quit_dialog, 'dialog_finished', quitter)
            core.ViewManager.set_commandbar(quit_dialog)
        elif quit_dialog is not None:
            quit_dialog.keypress(input)
    elif input == 'q':
        core.ViewManager.close_view()
    else:
        logger.debug("Unhandled key pressed: " + str(input))

def create_issues_view(issues):
    result = MyPageView(issues)
    urwid.signals.connect_signal(result, 'selected', lambda i: core.ViewManager.show_view(IssueView(i)))
    urwid.signals.connect_signal(result, 'goto_issue', lambda id: core.ViewManager.show_view(IssueView(core.Redmine.instance().issue(id))))
    urwid.signals.connect_signal(result, 'change_mode', change_main_view_mode)

    return result

def change_main_view_mode(mode):
    if mode == 'my_issues':
        core.ViewManager.replace_view(create_issues_view(core.Redmine.instance().my_issues(False)))
    elif mode == 'all_my_issues':
        core.ViewManager.replace_view(create_issues_view(core.Redmine.instance().my_issues(True)))
    elif mode == 'issues':
        core.ViewManager.replace_view(create_issues_view(core.Redmine.instance().issues(False)))
    elif mode == 'all_issues':
        core.ViewManager.replace_view(create_issues_view(core.Redmine.instance().issues(True)))
    else:
        raise Exception('Unsupported mode')


palette = [
    ('issue-progress_completed'   , 'dark green' , 'light blue' ) ,
    ('issue-progress_incompleted' , 'black'      , 'white'      ) ,
    ('issues_index-normal'        , 'dark green' , ''           ) ,
    ('issues_index-focused'       , 'black'      , 'dark green' ) ,
    ('status_line-warning'        , 'yellow'     , 'default'    ) ,
    ('status_line-error'          , 'dark red'   , 'default'    ) ,
    ('status_line-success'        , 'white'      , 'default'    ) ,
    ('status_line-info'           , 'light blue' , 'default'    )
]

main_widget = urwid.Frame(urwid.Text("clired"), footer=urwid.Text(""))
loop = urwid.MainLoop(main_widget, palette, unhandled_input=key_handler)
core.ViewManager.loop = loop

if argv.issue:
    issue_view = IssueView(core.Redmine.instance().issue(argv.issue))
    core.ViewManager.show_view(issue_view)
else:
    my_page = create_issues_view(core.Redmine.instance().my_issues(False))
    core.ViewManager.show_view(my_page)

loop.run()
print("Good bye!")
